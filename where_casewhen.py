# -*- coding: utf-8 -*-
"""WHERE - CASEWHEN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TSd4CY2WaVfX-lq4GoB1yT_SRsksn2JG

<a id="A"></a>
# <b>A. <span style='color:#0B2F9F'><code>WHERE</code></span></b>

Klausa `WHERE` dalam SQL digunakan untuk menyaring baris data dalam query berdasarkan kondisi tertentu. Cara ini digunakan untuk menentukan kriteria yang harus dipenuhi agar baris data muncul dalam hasil query. Perintah `WHERE` dapat digunakan untuk menyaring nilai :

<ul>
<li>Berdasarkan Kondisi Tertentu</li>
<li>Berdasarkan Beberapa Kondisi</li>
<li>Menggunakan Pola Pencocokan</li>
<li>Menggunakan Rentang Nilai</li>
<li>Berdasarkan Kumpulan Nilai</li>
<li>Berdasarkan Nilai Null</li>
</ul>

<a id="A.1."></a>
## <b>A.1. <span style='color:#0B2F9F'>Menyaring Nilai Berdasarkan Kondisi Tertentu</span></b>

Untuk melakukan penyaringan nilai berdasarkan kondisi tertentu dapat menggunakan <b>Comparison Operators</b>. Operator perbandingan (<i>comparison operators</i>) dalam SQL digunakan untuk membandingkan nilai-nilai dan menentukan bagaimana data memenuhi kondisi tertentu. Operator pembanding pada SQL disimbolkan dengan beberapa tanda berikut
<br><br>
<table border="1">
    <tr>
        <th>Tanda</th>
        <th>Deskripsi</th>
        <th>Contoh</th>
    </tr>
    <tr>
        <td>=</td>
        <td>Sama dengan (<i>Equals</i>)</td>
        <td>A = B</td>
    </tr>
    <tr>
        <td><></td>
        <td>Tidak Sama dengan (<i>Not Equals</i>)</td>
        <td>A <> B</td>
    </tr>
    <tr>
        <td><</td>
        <td>Kurang dari (<i>Less than</i>)</td>
        <td>A < B</td>
    </tr>
    <tr>
        <td>></td>
        <td>Lebih dari (<i>More than</i>)</td>
        <td>A > B</td>
    </tr>
    <tr>
        <td><=</td>
        <td>Kurang dari sama dengan (<i>Less than or Equals To</i>)</td>
        <td>A <= B</td>
    </tr>
    <tr>
        <td>>=</td>
        <td>Lebih dari sama dengan (<i>More than or Equals To</i>)</td>
        <td>A >= B</td>
    </tr>
</table>

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan semua data pada tabel customer_services yang menggunakan layanan telfon (phone_services)!</b></i>
"""

select * from `telcocurn.telcoservices`
where phone_service = true

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan semua data pada tabel customer_services yang tenure_in_monthsnya lebih dari 30!</b></i>"""

select * from `telcocurn.telcoservices`
where tenure_in_months > 30

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan kolom customer_id, tenure_in_months, internet_type pada tabel customer_services yang internet_type nya menggunakan Fiber Optic!</b></i>"""

select customer_id, tenure_in_months, internet_type from `telcocurn.telcoservices`
where internet_type = 'Fiber Optic'

"""<a id="A.2."></a>
## <b>A.2. <span style='color:#0B2F9F'>Menyaring Nilai Berdasarkan Beberapa Kondisi</span></b>

Untuk melakukan penyaringan nilai berdasarkan beberapa kondisi dapat menggunakan <b>Logical Operators</b>. Operator logika (<i>logical operator</i>) adalah simbol atau kata kunci yang digunakan untuk menghubungkan dua atau lebih ekspresi logis dan menghasilkan nilai logis baru berdasarkan operasi tersebut. Operator logika pada SQL disimbolkan dengan beberapa tanda berikut
<br><br>
<table border="1">
    <tr>
        <th>Tanda</th>
        <th>Deskripsi</th>
        <th>Kondisi</th>
        <th>Contoh</th>
    </tr>
    <tr>
        <td><b>AND</b></td>
        <td>Operator penghubung 'DAN'</td>
        <td><i>Statement</i> bernilai benar jika keduanya benar / terpenuhi,<br>jika tidak demikian maka bernilai salah</td>
        <td>Condition 1 <b>AND</b> Condition 2</td>
    </tr>
    <tr>
        <td><b>OR</b></td>
        <td>Operator penghubung 'ATAU'</td>
        <td><i>Statement</i> bernilai salah jika keduanya salah / tidak terpenuhi,<br>jika tidak demikian maka bernilai benar</td>
        <td>Condition 1 <b>OR</b> Condition 2</td>
    </tr>
    <tr>
        <td><b>NOT</b></td>
        <td>Operator 'BUKAN'</td>
        <td>Operator ini membalikkan nilai logis dari ekspresi yang dioperasikan</td>
        <td><b>NOT</b> Condition 1</td>
    </tr>
</table>
<br><br>
Saat digunakan, untuk menyaring dua atau lebih pernyataan dengan operator logika akan berlaku kriteria sebagai berikut
<br><br>
<table border="1">
    <tr>
        <th>Condition 1</th>
        <th>Condition 2</th>
        <th>Condition 1 <span style='color:#55679C'>AND</span> Condition 2</th>
        <th>Condition 1 <span style='color:#55679C'>OR</span> Condition 2</th>
    </tr>
    <tr>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
    </tr>
    <tr>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
    </tr>
    <tr>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#EEF296'>Benar</span></td>
    </tr>
    <tr>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
        <td align = "center"><span style='color:#508D69'>Salah</span></td>
    </tr>
</table>

Saat query dijalankan, hanya output yang bernilai benar saja yang akan ditampilkan.

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan semua pada tabel customer_services yang mereferensikan layanan kepada orang lain dengan jumlah referal lebih dari 1!</b></i>
"""

select * from `telcocurn.telcoservices`
where referred_a_friend = true and number_of_referrals >1

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan kolom customer_id, tenure_in_months, internet_type dan total_revenue pada tabel customer_services yang internet_type nya menggunakan Fiber Optic atau tenure_in_months kurang dari sama dengan 30!</b></i>"""

select customer_id, tenure_in_months, internet_type, total_revenue from `telcocurn.telcoservices`
where internet_type = 'Fiber Optic' or tenure_in_months <= 30

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan kolom customer_id, internet_type dan total_revenue pada tabel customer_services yang internet_type nya bukan menggunakan Fiber Optic, lalu urutkan berdasarkan total_revenue mulai dari yang paling besar!</b></i>"""

select customer_id, internet_type, total_revenue from `telcocurn.telcoservices`
where internet_type <> 'Fiber Optic'
order by total_revenue desc

"""<a id="A.3."></a>
## <b>A.3. <span style='color:#0B2F9F'>Menyaring Nilai Menggunakan Pola Pencocokan</span></b>

SQL telah mendukung operator dan fungsi yang memungkinkan untuk melakukan pencocokan pola pada sebuah teks. Untuk melakukan hal ini dapat menggunakan query `LIKE` dengan bantuan tanda <b>Wildcard (%)</b>. Tanda <b>Wildcard (%)</b>. Wildcard memungkinkan untuk mencari data dengan pola yang tidak pasti atau variatif pada sebuah teks. Contoh :

Sebuah data karyawan memiliki kolom nama, terdapat nama Ilham, Kurnia, Bachtiyar, Baim, Ridho dan Deki
<ul>
    <li>Untuk mencari nama yang diawali huruf B, gunakan sintaks <code>WHERE nama LIKE 'B%'</code>.<br>Nama yang cocok : Bachtiyar & Baim</li><br>
    <li>Untuk mencari nama yang diakhiri dengan huruf m, gunakan sintaks <code>WHERE nama LIKE '%m'</code>.<br>Nama yang cocok : Ilham & Baim</li><br>
    <li>Untuk mencari nama yang diawali huruf B namun diakhiri dengan m, gunakan sintaks <code>WHERE nama LIKE 'B%m'</code>.<br>Nama yang cocok : Baim</li>
</ul>

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan 5 data customer_id pada tabel customer_service yang nomor kodenya dimulai angka 2 dan urutkan dari yang terkecil hingga terbesar!</b></i>
"""

select customer_id from `telcocurn.telcoservices`
where customer_id like '2%'
order by customer_id asc
Limit 5

"""<a id="A.4."></a>
## <b>A.4. <span style='color:#0B2F9F'>Menyaring Nilai Menggunakan Rentang Nilai</span></b>

Selain menggunakan operator pembanding, dapat juga menggunakan query `BETWEEN` untuk mendapatkan nilai pada rentang tertentu. Untuk menyingkat penulisan <code>nilai1 <= nama_kolom AND nama_kolom <= nilai2</code> dapat menggunakan alternatif <code>nama_kolom BETWEEN nilai1 AND nilai2</code>.

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan data customer_id, internet_type, avg_monthly_gb_download pada tabel customer_service yang avg_monthly_gb_download berada pada rentang nilai 20 hingga 30!</b></i>
"""

select customer_id, internet_type, avg_monthly_gb_download from `telcocurn.telcoservices`
where avg_monthly_gb_download between 20 and 30

"""<a id="A.5."></a>
## <b>A.5. <span style='color:#0B2F9F'>Menyaring Nilai Berdasarkan Kumpulan Nilai</span></b>

Untuk melakukan penyaringan nilai berdasarkan kumpulan nilai dapat menggunakan <b>Operator Keanggotaan</b>. Operator keanggotaan (<i>membership operators</i>) dalam SQL digunakan untuk digunakan untuk memeriksa apakah suatu nilai cocok dengan nilai apa pun dalam daftar atau subkueri tertentu. Contoh penggunaan operator keanggotaan pada SQL adalah sebagai berikut :

Sebuah data karyawan memiliki kolom nama, terdapat nama Ilham, Kurnia, Bachtiyar, Baim, Ridho dan Deki
<ul>
    <li>Untuk mencari nama Ilham dan Ridho, gunakan sintaks <code>WHERE nama IN ('Ilham', 'Ridho')</code>.<br>Output : Ilham, Ridho</li><br>
    <li>Untuk mencari nama <b>SELAIN</b> Ilham dan Ridho, gunakan sintaks <code>WHERE nama NOT IN ('Ilham', 'Ridho')</code>.<br>Output : Kurnia, Bachtiyar, Baim, Deki</li>
</ul>

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan data customer_id, offer dan total_revenue pada tabel customer_service yang tipe penawaran-nya adalah A & E!</b></i>
"""

select customer_id, offer, total_revenue from `telcocurn.telcoservices`
where offer in ('Offer A', 'Offer E')

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan data customer_id, offer, internet_type dan total_revenue pada tabel customer_service yang tipe penawaran-nya adalah A & E namun internet_type-nya bukan Fiber Optic atau DSL!</b></i>"""

select customer_id, offer, internet_type, total_revenue from `telcocurn.telcoservices`
where offer in ('Offer A', 'Offer E')
and internet_type not in ('Fiber Optic', 'DSL')

"""<a id="A.6."></a>
## <b>A.6. <span style='color:#0B2F9F'>Menyaring Nilai Berdasarkan Nilai NULL</span></b>

`NULL` adalah nilai khusus yang digunakan untuk menunjukkan bahwa data tidak tersedia, tidak diketahui, atau tidak relevan. Untuk mencari data yang NULL pada SQL gunakan perintah berikut :

<ul>
    <li>Untuk mencari data yang kosong atau NULL, gunakan sintaks <code>WHERE nama_kolom IS NULL</code></li><br>
    <li>Untuk mencari data yang tidak kosong atau NOT NULL, gunakan sintaks <code>WHERE nama_kolom IS NOT NULL</code></li><br>
</ul>

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan data customer_id, offer, internet_type dan total_revenue pada tabel customer_service yang tidak mendapatkan tipe penawaran!</b></i>
"""

select customer_id, offer, internet_type, total_revenue from `telcocurn.telcoservices`
where offer is null

"""<a id="B"></a>
# <b>B. <span style='color:#0B2F9F'><code>CASE-WHEN</code></b>

`CASE` adalah sebuah ekspresi dalam SQL yang digunakan untuk melakukan logika kondisional. `CASE` sering digunakan untuk mengubah nilai yang ditampilkan dalam query berdasarkan kondisi tertentu. Untuk dapat menggunakan perintah `CASE` gunakan sintaks umum berikut

SELECT<br>
    CASE<br>
        WHEN condition1 THEN result1<br>
        WHEN condition2 THEN result2<br>
        ...<br>
        ELSE default_result<br>
    END AS alias_name<br>
FROM table_name<br>

#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan kolom customer_id, monthly_charge dan monthly_charge_type pada tabel customer_service, dengan ketentuan</b></i><br>
<ul>
<li>Jika monthly_charge < 50.2 maka monthly_charge_type = 'Low Charge'</li>
<li>Jika 50.2 <= monthly_charge < 83.2 maka monthly_charge_type = 'Medium Charge'</li>
<li>Jika monthly_charge >= 83.2 50.2 maka monthly_charge_type = 'High Charge'</li>
</ul>
"""

select customer_id, monthly_charge,
  case
    when monthly_charge < 50.2 then 'Low Charge'
    when monthly_charge <=50.2 and  monthly_charge < 83.2 then 'Medium Charge'
    else 'High Charge'
    end as monthly_charge_type
from `telcocurn.telcoservices`

"""#### <i><b><span style='color:#55679C'>Quest</span> : Tampilkan kolom customer_id, phone_service, internet_service dan phone_internet_type pada tabel customer_service, dengan ketentuan</b></i><br>
<ul>
<li>Jika customer menggunakan layanan Telepon & Internet, maka phone_internet_type = Phone & Internet</li>
<li>Jika customer menggunakan layanan Telepon namun tidak menggunakan layanan Internet, maka phone_internet_type = Phone Only</li>
<li>Jika customer tidak menggunakan layanan Telepon namun menggunakan layanan Internet, maka phone_internet_type = Internet Only</li>
<li>Jika customer tidak menggunakan kedua layanan tersebut, maka phone_internet_type = No Phone & Internet</li>
</ul>
"""

SELECT
    customer_id,
    phone_service,
    internet_service,
    CASE
      WHEN phone_service = true AND internet_service = true THEN 'Phone & Internet'
      WHEN phone_service = true AND internet_service = false THEN 'Phone Only'
      WHEN phone_service = false AND internet_service = true THEN 'Internet Only'
      ELSE 'No Phone & Internet'
    END AS phone_internet_type
FROM telcocurn.telcoservices